@using UserRegistrationApp.Data
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(MainLayout)">
                <NotAuthorized>
                    @if (!NavigationManager.Uri.EndsWith("/login"))
                    {
                        NavigationManager.NavigateTo("/login", forceLoad: true);
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@code {
    private bool IsLoggedIn { get; set; }

    @* protected override void OnInitializedAsync()
{
IsLoggedIn = await AuthenticationService.IsAuthenticated;
} *@

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.Uri;
            //var isLoggedIn = AuthenticationService.IsAuthenticated;

            if (url.EndsWith("/login"))
            {
                IsLoggedIn = false;
            }
            else
            {
                IsLoggedIn = true;
            }
        }
    }
}