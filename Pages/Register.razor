@page "/register"
@using UserRegistrationApp.Data
@using UserRegistrationApp.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IUserService UserService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <h1>Register Page</h1>
    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
        <ValidationMessage For="@(() => user.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="ConfirmPassword" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    <button class="btn btn-secondary" @onclick="NavigateToRegister">Login</button>

</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    private User user = new User();
    private string? errorMessage;
    private string? ConfirmPassword { get; set; }


    private async Task HandleValidSubmit()
    {
        if (user.Password != ConfirmPassword)
        {
            errorMessage = "Password and confirmation password do not match.";

        }
        else
        {
            try
            {
                var result = await AuthenticationService.Register(name: user.Username, email: user.Email, password: user.Password);
                //var result = await UserService.CreateUser(user);
                if (result)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    if (result == false)
                    {
                        errorMessage = "User already exists.";
                    }
                    else
                    {
                        errorMessage = "Registration failed. Please try again.";
                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Registration failed: {ex.InnerException?.Message}";
                Console.WriteLine(errorMessage);
                Console.WriteLine($"Registration result: {user.Username}");
                Console.WriteLine($"Registration result: {user.Email}");
                Console.WriteLine($"Registration result: {user.Password}");

            }
        }
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/login");
    }
}